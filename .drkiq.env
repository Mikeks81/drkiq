# You would typically use `rake secret` to generate a secure token. It is
# critical that you keep this value private in production.
SECRET_TOKEN=691ddc5a4a5156bf229292e6c3281eb1b261e477733d78f4e87a6d18042808398e3c69901ec4af8a43df4469e23ab8a691562860902c6cac9362deb2906b1021


# Unicorn is more than capable of spawning multiple workers, and in production
# you would want to increase this value but in development you should keep it
# set to 1.
#
# It becomes difficult to properly debug code if there's multiple copies of
# your application running via workers and/or threads.
WORKER_PROCESSES=1


# This will be the address and port that Unicorn binds to. The only real
# reason you would ever change this is if you have another service running
# that must be on port 8000.
LISTEN_ON=0.0.0.0:8000


# This is how we'll connect to PostgreSQL. It's good practice to keep the
# username lined up with your application's name but it's not necessary.
#
# Since we're dealing with development mode, it's ok to have a weak password
# such as `yourpassword` but in production you'll definitely want a better one.
#
# Eventually we'll be running everything in Docker containers, and you can set
# the host to be equal to `postgres` thanks to how Docker allows you to link
# containers.
#
# Everything else is standard Rails configuration for a PostgreSQL database.
DATABASE_URL=postgresql://drkiq:password@postgres:5432/drkiq?encoding=utf8&pool=5&timeout=5000


# Both of these values are using the same Redis address but in a real
# production environment you may want to separate Sidekiq to its own instance,
# which is why they are separated here.
#
# We'll be using the same Docker link trick for Redis which is how we can
# reference the Redis hostname as `redis`.
CACHE_URL=redis://redis:6379/0
JOB_WORKER_URL=redis://redis:6379/0
